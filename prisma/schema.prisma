// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  email          String           @unique
  name           String
  password       String
  organizations  UserOrganization[]
  projects       Project[]        @relation("UserProjects")
  activities     Activity[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
}

model Organization {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  users          UserOrganization[]
  projects       Project[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
}

model UserOrganization {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  organizationId String           @db.ObjectId
  role           Role
  user           User             @relation(fields: [userId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id])
  
  @@unique([userId, organizationId]) // Ensures a user can't belong to the same organization twice
}

model Project {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  ownerId        String           @db.ObjectId
  owner          User             @relation("UserProjects", fields: [ownerId], references: [id])
  organizationId String?          @db.ObjectId
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  activities     Activity[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
}

model Activity {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String           @db.ObjectId
  userId         String           @db.ObjectId
  action         ActionType
  roleAtTime     Role
  timestamp      DateTime         @default(now())
  project        Project          @relation(fields: [projectId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
  DATA_ENTRY
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}